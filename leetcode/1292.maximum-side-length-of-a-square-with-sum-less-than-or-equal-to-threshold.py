#
# @lc app=leetcode id=1292 lang=python3
#
# [1292] Maximum Side Length of a Square with Sum Less than or Equal to Threshold
#
# https://leetcode.com/problems/maximum-side-length-of-a-square-with-sum-less-than-or-equal-to-threshold/description/
#
# algorithms
# Medium (49.75%)
# Total Accepted:    15K
# Total Submissions: 29.9K
# Testcase Example:  '[[1,1,3,2,4,3,2],[1,1,3,2,4,3,2],[1,1,3,2,4,3,2]]\r\n4\r'
#
# Given a m x n matrix mat and an integer threshold. Return the maximum
# side-length of a square with a sum less than or equal to threshold or return
# 0 if there is no such square.
#
#
# Example 1:
#
#
# Input: mat = [[1,1,3,2,4,3,2],[1,1,3,2,4,3,2],[1,1,3,2,4,3,2]], threshold = 4
# Output: 2
# Explanation: The maximum side length of square with sum less than 4 is 2 as
# shown.
#
#
# Example 2:
#
#
# Input: mat = [[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2]],
# threshold = 1
# Output: 0
#
#
# Example 3:
#
#
# Input: mat = [[1,1,1,1],[1,0,0,0],[1,0,0,0],[1,0,0,0]], threshold = 6
# Output: 3
#
#
# Example 4:
#
#
# Input: mat = [[18,70],[61,1],[25,85],[14,40],[11,96],[97,96],[63,45]],
# threshold = 40184
# Output: 2
#
#
#
# Constraints:
#
#
# 1 <= m, n <= 300
# m == mat.length
# n == mat[i].length
# 0 <= mat[i][j] <= 10000
# 0 <= threshold <= 10^5
#
#
#
from collections import namedtuple
from functools import lru_cache
from typing import List

Coord = namedtuple('coord', ['row', 'col'])





class Solution:
    """
    >>> Solution().maxSideLength([[11,4,64,99,8,66,58,71,88,27,6,48,82,10,94,69,43,35,81,41,50,92,7,1,100,17,    76,61,23,67,45,75,91,53,15,90,30,12,62,22,28,14,52,13],[98,27,85,3,76,50,68,1,60,44,32,43,59,99,90,5,79,84,53,20,    81,23,94,54,62,40,26,31,61,13,72,15,36,64,97,69,91,95,67,47,16,8,11,6],[27,6,24,71,66,73,21,45,68,32,49,98,37,83,    67,46,30,40,90,2,19,86,74,44,64,80,93,85,26,100,17,33,36,8,1,42,88,69,75,15,63,4,43,61],[89,41,94,54,10,11,84,71, 77,61,24,36,78,83,98,17,100,45,27,87,35,1,32,55,23,39,80,8,93,3,73,70,42,4,6,52,74,57,82,38,81,67,30,79],[49,28, 74,37,32,89,38,64,43,88,18,53,50,12,97,22,23,94,78,1,68,30,98,10,92,57,86,84,33,24,15,48,85,95,39,27,14,60,0,19,81,62,47,21],[60,41,78,52,10,83,14,1,42,50,57,23,97,56,38,65,13,96,98,49,75,70,4,37,82,39,100,34,35,40,85,6,53,90,22,26,28,18,3,43,68,63,72,54],[75,68,57,67,91,37,45,55,3,85,13,30,41,34,20,77,23,93,35,27,99,29,62,32,21,84,96,38,81,9,66,60,87,47,69,95,59,65,2,98,12,61,18,39],[76,9,77,4,100,18,3,17,32,89,86,72,26,56,54,14,49,93,97,15,84,13,87,19,42,36,66,73,21,29,99,70,24,96,85,60,78,33,55,65,31,11,2,44],[32,57,49,73,15,39,4,88,6,28,43,30,19,59,71,97,37,70,40,56,35,80,77,64,68,26,34,98,83,67,27,94,5,25,17,8,72,24,75,54,29,45,14,50],[55,9,50,38,95,22,84,76,28,58,77,41,81,92,1,39,59,99,2,17,23,10,52,20,68,54,61,82,32,91,83,35,100,4,5,7,75,43,0,8,74,79,21,34],[4,42,18,58,31,26,79,24,17,43,81,27,73,56,29,69,47,53,90,7,72,95,93,94,65,40,87,8,76,38,3,57,25,32,84,14,23,21,0,86,67,5,45,66],[41,38,21,27,34,46,50,86,83,100,85,12,74,68,47,11,57,67,59,45,30,13,61,92,35,91,60,43,64,90,88,0,14,23,53,56,39,32,51,77,69,31,29,55],[46,1,11,81,26,96,93,66,59,74,5,14,28,12,69,25,33,55,20,98,37,48,70,47,23,67,9,51,88,27,2,43,36,65,75,78,64,76,89,87,40,100,39,68],[10,30,67,49,76,26,87,99,74,100,75,60,21,45,39,13,4,72,47,97,77,89,28,9,37,44,88,54,11,50,33,79,95,42,8,6,18,48,40,12,81,2,68,53],[22,7,90,97,63,33,8,91,93,56,6,34,88,66,15,62,49,98,52,94,55,65,67,44,9,86,71,10,13,14,78,43,82,50,27,19,96,46,75,40,1,39,35,95],[72,23,99,31,9,12,10,87,43,55,75,11,71,83,73,33,85,45,44,30,37,79,62,46,67,36,8,90,77,13,28,82,48,54,14,53,1,47,61,6,91,69,60,16],[55,48,67,21,86,20,28,65,68,45,34,51,6,80,30,62,4,18,52,99,11,100,74,58,7,81,16,95,63,69,89,88,31,92,84,46,97,71,53,64,59,90,41,50],[58,21,19,46,61,79,8,70,98,26,49,68,22,4,23,88,63,28,10,12,52,72,31,35,93,65,18,47,9,90,45,80,55,83,86,41,94,51,60,14,64,62,75,38],[17,76,26,44,19,66,100,60,47,33,5,34,8,21,64,1,91,81,11,0,23,65,72,89,80,78,16,31,13,71,75,63,49,40,79,93,52,58,28,24,99,29,61,97],[75,18,49,65,42,43,62,66,15,77,74,90,95,7,2,39,89,22,6,16,37,78,25,33,27,99,98,72,61,19,26,20,54,70,91,1,41,4,9,14,60,100,56,76],[57,86,64,26,93,80,48,63,68,84,51,18,76,52,74,25,22,82,14,75,8,17,15,41,35,81,49,7,60,28,5,45,55,29,24,91,96,9,40,6,11,1,87,78],[71,53,60,77,90,65,40,55,29,7,99,92,75,64,74,87,6,72,21,3,33,49,5,70,8,0,95,80,17,27,16,81,52,14,13,61,68,78,10,2,85,48,32,51],[62,32,46,3,83,96,100,68,72,31,54,28,17,73,56,34,6,44,11,51,48,42,4,9,66,64,35,67,18,78,37,14,74,94,40,89,70,61,93,39,7,86,88,25],[90,9,43,64,39,85,51,35,32,95,1,10,2,34,96,42,4,93,12,21,70,58,23,25,15,30,56,100,71,82,5,72,78,14,40,79,69,18,11,98,73,27,48,19],[22,35,63,19,98,68,43,55,50,56,60,69,45,47,82,92,1,67,21,40,49,27,84,93,5,28,89,62,75,87,71,48,44,33,3,57,52,51,0,81,17,83,10,42],[12,57,74,60,36,4,47,38,22,0,97,11,65,25,24,17,83,70,20,86,23,66,44,99,88,51,10,41,59,71,58,84,7,34,89,48,54,15,93,55,46,2,37,40],[41,28,96,98,74,11,30,68,13,48,70,64,14,24,73,31,18,59,76,34,38,90,37,32,94,3,5,43,36,29,81,66,88,19,72,77,95,67,15,79,40,33,56,100],[28,70,10,55,27,89,7,15,63,88,87,8,40,22,20,62,45,49,43,74,26,38,97,32,0,37,46,65,91,41,13,90,81,42,17,18,52,19,3,30,39,14,44,67],[62,46,39,91,99,6,85,27,41,69,13,72,78,33,95,100,82,34,35,19,60,75,49,93,83,92,1,90,64,22,98,54,29,21,28,77,36,86,73,50,0,61,15,56],[78,40,21,83,11,37,90,73,47,26,5,84,74,92,64,55,22,31,42,10,34,25,58,77,23,9,45,81,18,89,6,24,95,100,17,33,27,39,19,36,13,2,12,32],[14,92,84,17,10,47,28,52,13,16,94,44,87,25,36,80,76,60,98,56,1,24,35,23,73,29,31,43,97,79,85,86,81,100,4,48,95,72,15,78,50,58,57,0],[0,71,18,62,29,85,96,93,17,11,3,39,75,23,65,52,50,59,42,24,79,20,77,35,21,100,82,6,48,95,61,72,68,27,81,12,37,88,83,97,73,7,67,19],[74,26,69,48,29,22,6,82,54,78,81,65,75,71,61,24,21,53,7,31,92,35,15,96,9,58,89,86,88,76,4,37,20,13,55,23,33,80,67,12,64,10,52,36],[81,94,100,51,5,25,2,22,30,68,8,0,50,96,71,90,57,13,36,84,41,64,89,17,53,32,82,40,1,47,99,58,29,37,28,52,19,23,73,92,11,61,44,35],[74,67,15,99,9,71,58,1,76,14,57,78,54,21,18,93,86,44,55,7,70,77,49,89,28,62,48,36,95,4,83,40,56,65,41,47,39,31,73,5,27,51,12,32],[31,17,65,7,28,67,55,2,18,12,76,23,42,27,94,73,40,92,68,58,71,70,95,3,59,29,51,45,90,50,43,44,4,91,22,88,77,97,34,72,37,16,66,81],[61,49,24,22,96,27,97,70,2,82,53,38,34,57,71,80,90,92,95,16,59,35,81,32,52,64,29,50,45,78,37,26,15,67,25,73,66,7,86,91,68,1,83,75],[88,75,59,57,62,36,33,26,79,50,29,56,28,4,16,31,27,90,76,72,3,2,45,94,89,21,100,19,20,14,71,34,22,44,49,67,78,32,80,81,9,84,1,10],[56,14,45,25,60,88,76,82,15,23,39,42,71,78,57,59,73,44,6,0,86,16,32,35,98,63,38,55,17,81,68,9,20,22,99,64,10,87,36,3,89,70,96,58],[14,50,96,38,68,1,22,53,43,59,19,95,88,70,15,49,75,21,32,41,29,8,42,64,3,82,23,99,61,34,0,60,98,76,52,48,87,85,37,4,58,56,20,35],[51,77,9,36,62,61,53,27,0,5,38,34,19,33,85,40,14,7,86,56,15,45,80,69,16,46,95,89,6,48,55,71,28,73,79,20,67,47,49,68,17,31,78,65],[84,69,60,22,49,34,41,0,10,28,21,64,55,31,51,54,17,57,33,14,26,8,15,5,61,80,94,45,95,11,40,35,62,53,86,67,39,3,16,81,24,19,32,30],[46,27,29,45,52,82,6,49,75,55,87,4,54,36,0,14,9,100,50,26,2,81,12,57,85,84,62,92,35,47,44,10,16,67,32,58,3,73,34,76,68,72,88,25],[1,21,47,94,45,31,69,54,63,33,27,59,22,11,92,82,9,93,19,100,16,51,3,50,35,75,30,89,70,76,44,25,32,78,95,28,29,87,36,83,88,79,60,13],[72,6,32,60,27,4,34,94,76,30,79,58,44,98,11,97,7,81,35,40,16,59,92,66,54,38,90,39,45,17,20,37,47,42,96,80,26,36,31,55,3,1,29,23],[40,37,7,18,62,99,54,13,45,23,81,94,92,70,86,79,47,19,4,16,24,41,12,65,39,21,22,6,95,32,0,20,38,26,43,100,36,98,84,82,55,75,77,85],[13,39,16,45,64,1,68,78,80,95,73,30,49,29,8,92,53,67,56,82,47,7,81,77,44,6,5,58,14,69,0,35,94,65,34,61,17,27,2,90,83,46,4,91],[60,65,78,67,36,90,100,91,42,5,70,43,44,56,97,37,14,22,16,23,17,15,34,38,11,81,73,50,0,10,19,30,76,59,98,55,99,68,32,41,46,51,75,7],[18,49,28,84,83,89,79,25,72,95,44,100,14,1,5,60,11,70,94,80,42,48,51,0,27,76,55,52,32,7,38,71,53,12,40,37,20,30,34,31,68,9,2,92],[48,75,33,5,62,16,76,70,21,23,78,15,67,26,31,68,91,77,82,92,45,19,27,79,32,43,64,55,89,59,44,72,66,17,56,3,36,65,13,12,22,25,85,20],[8,38,9,75,33,99,17,46,18,78,35,28,5,82,6,84,97,51,22,69,57,81,58,91,7,12,24,79,39,71,32,70,20,40,26,85,16,52,50,25,23,15,3,4],[24,29,41,38,90,95,21,46,28,1,74,17,81,78,8,52,85,96,98,9,11,23,83,56,22,13,27,55,59,5,30,45,72,68,40,70,62,14,100,66,20,34,2,64],[11,10,12,81,52,59,53,34,43,63,95,18,37,19,85,1,27,72,32,0,74,78,68,45,42,79,14,22,93,50,35,84,88,6,75,61,70,98,49,8,67,91,56,15],[63,77,6,51,19,59,5,97,44,88,42,80,8,50,99,29,85,52,26,14,60,66,3,70,12,61,46,74,79,90,93,10,30,83,36,43,94,53,68,87,89,9,28,33],[41,40,82,46,55,5,56,35,7,29,6,68,10,85,23,3,69,67,44,38,95,26,88,39,18,51,19,32,1,31,4,77,58,16,87,42,62,97,89,66,53,21,65,80],[31,28,0,95,46,8,90,15,97,52,54,23,40,93,6,37,98,14,51,79,16,59,11,24,62,33,29,48,56,85,32,39,78,44,1,12,38,36,9,25,45,4,13,88],[16,39,9,75,90,35,50,27,53,34,42,43,94,52,56,12,88,14,91,97,11,37,17,23,80,77,4,54,59,31,66,18,63,81,21,58,79,3,5,40,74,47,28,82],[33,43,11,86,34,23,64,100,76,87,73,58,82,32,62,35,21,93,47,18,71,7,77,30,90,12,84,81,63,5,98,4,91,56,2,31,50,67,94,22,26,3,37,66],[52,78,61,64,89,24,23,63,36,98,27,81,25,29,88,53,20,96,38,42,5,6,12,100,2,48,11,0,70,40,94,30,82,9,22,68,85,3,90,8,47,14,67,80]], 46849)
    31

    >>> Solution().maxSideLength(mat = [[1,1,3,2,4,3,2],[1,1,3,2,4,3,2],[1,1,3,2,4,3,2]], threshold = 4)
    2

    >>> Solution().maxSideLength(mat = [[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2]], threshold = 1)
    0

    >>> Solution().maxSideLength(mat = [[1,1,1,1],[1,0,0,0],[1,0,0,0],[1,0,0,0]], threshold = 6)
    3

    >>> Solution().maxSideLength([[18,70],[61,1],[25,85],[14,40],[11,96],[97,96],[63,45]], threshold = 40184)
    2

    """
    def maxSideLength(self, mat: List[List[int]], threshold: int) -> int:
        l = Coord(0, 0)
        r = Coord(0, 0)

        br = 0

        @lru_cache(None)
        def sum_row(row_start, row_end, col):
            s = 0
            for row in range(row_start, row_end):
                s += mat[row][col]
            return s

        @lru_cache(None)
        def sum_col(col_start, col_end, row):
            s = 0
            for col in range(col_start, col_end):
                s += mat[row][col]
            return s

        @lru_cache(None)
        def get_sum(left, right, mode='right'):

            """
            Sum this:
            xx0
            xx0
            000

            """
            t = {'right': right, 'left': left}

            s = 0
            s += sum_row(left.row, right.row + 1, t[mode].col)
            s += sum_col(left.col, right.col + 1, t[mode].row)
            s -= mat[t[mode].row][t[mode].col]
            return s

        @lru_cache(None)
        def recur(left, right, best_result):
            """
            :param left: Coord
            :param right: Coord
            :param best_result: int
            :return:
            """

            if left.row < len(mat) - 1:
                best_result = max(best_result, recur(Coord(left.row + 1, left.col),
                                                     Coord(right.row + 1, right.col),
                                                     best_result))
            if left.col < len(mat[0]) - 1:
                best_result = max(best_result, recur(Coord(left.row, left.col + 1),
                                                     Coord(right.row, right.col + 1),
                                                     best_result))

            running_sum = mat[left.row][left.col]

            while right.row < len(mat) - 1 and right.col < len(mat[0]) - 1 and left.row < len(mat) - 1 and left.col <\
                    len(mat[0]) - 1:
                while right.row < len(mat) - 1 and right.col < len(mat[0]) - 1:
                    if running_sum + get_sum(left, Coord(right.row + 1, right.col + 1)) <= threshold:
                        right = Coord(right.row + 1, right.col + 1)
                        running_sum += get_sum(left, right)
                    else:
                        break

                if not(right == left and mat[right.row][right.col] > threshold):
                    best_result = max(best_result, right.row - left.row + 1)

                running_sum -= get_sum(left, right, mode='left')
                left = Coord(left.row + 1, left.col + 1)

            return best_result

        return recur(l, r, br)

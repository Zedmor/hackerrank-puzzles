# There are two sorted arrays nums1 and nums2 of size m and n respectively.## Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).## Example 1:# nums1 = [1, 3]# nums2 = [2]## The median is 2.0# Example 2:# nums1 = [1, 2]# nums2 = [3, 4]## The median is (2 + 3)/2 = 2.5class Solution:    def median(self, arr):        return arr[len(arr) // 2] if len(arr) % 2 != 0 else (arr[len(arr) // 2] + arr[            len(arr) // 2 - 1]) / 2    def findMedianSortedArrays(self, nums1, nums2):        """        :type nums1: List[int]        :type nums2: List[int]        :rtype: float        """        if len(nums1) == 0:            return self.median(nums2)        if len(nums2) == 0:            return self.median(nums1)        if len(nums1) == 1 and len(nums2) == 1:            return (nums1[0] + nums2[0]) / 2        med1 = self.median(nums1)        pos1 = len(nums1) // 2        med2 = self.median(nums2)        pos2 = len(nums2) // 2        if med1 == med2:            return med1        if len(nums1) <= 2 and len(nums2) <= 2:            return (max(nums1[0], nums2[0]) + min(nums2[-1], nums1[-1])) / 2        if med1 < med2:            if len(nums1) > 2:                nums1 = nums1[pos1:]            if len(nums2) > 2:                nums2 = nums2[:pos2 + 1]        else:            if len(nums1) > 2:                nums1 = nums1[:pos1 + 1]            if len(nums2) > 2:                nums2 = nums2[pos2:]        res = self.findMedianSortedArrays(nums1, nums2)        if res:            return res# nums1 = [1, 2, 3, 4, 5, 6]# nums2 = [1, 8, 18]nums1 = [1, 2]nums2 = [1, 2, 3]print(Solution().findMedianSortedArrays(nums1, nums2))
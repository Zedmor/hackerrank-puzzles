lines = ['.#..#',
         '.....',
         '#####',
         '....#',
         '...##']

lines = ['......#.#.',
         '#..#.#....',
         '..#######.',
         '.#.#.###..',
         '.#..#.....',
         '..#....#.#',
         '#..#....#.',
         '.##.#..###',
         '##...#..#.',
         '.#....####'
         ]

lines = ['..............#.#...............#....#....',
          '#.##.......#....#.#..##........#...#......',
          '..#.....#....#..#.#....#.....#.#.##..#..#.',
          '...........##...#...##....#.#.#....#.##..#',
          '....##....#...........#..#....#......#.###',
          '.#...#......#.#.#.#...#....#.##.##......##',
          '#.##....#.....#.....#...####........###...',
          '.####....#.......#...##..#..#......#...#..',
          '...............#...........#..#.#.#.......',
          '........#.........##...#..........#..##...',
          '...#..................#....#....##..#.....',
          '.............#..#.#.........#........#.##.',
          '...#.#....................##..##..........',
          '.....#.#...##..............#...........#..',
          '......#..###.#........#.....#.##.#......#.',
          '#......#.#.....#...........##.#.....#..#.#',
          '.#.............#..#.....##.....###..#..#..',
          '.#...#.....#.....##.#......##....##....#..',
          '.........#.#..##............#..#...#......',
          '..#..##...#.#..#....#..#.#.......#.##.....',
          '#.......#.#....#.#..##.#...#.......#..###.',
          '.#..........#...##.#....#...#.#.........#.',
          '..#.#.......##..#.##..#.......#.###.......',
          '...#....###...#......#..#.....####........',
          '.............#.#..........#....#......#...',
          '#................#..................#.###.',
          '..###.........##...##..##.................',
          '.#.........#.#####..#...##....#...##......',
          '........#.#...#......#.................##.',
          '.##.....#..##.##.#....#....#......#.#....#',
          '.....#...........#.............#.....#....',
          '........#.##.#...#.###.###....#.#......#..',
          '..#...#.......###..#...#.##.....###.....#.',
          '....#.....#..#.....#...#......###...###...',
          '#..##.###...##.....#.....#....#...###..#..',
          '........######.#...............#...#.#...#',
          '...#.....####.##.....##...##..............',
          '###..#......#...............#......#...#..',
          '#..#...#.#........#.#.#...#..#....#.#.####',
          '#..#...#..........##.#.....##........#.#..',
          '........#....#..###..##....#.#.......##..#',
          '.................##............#.......#..']

lines7 = ['.#..##.###...#######',
'##.############..##.',
'.#.######.########.#',
'.###.#######.####.#.',
'#####.##.#.##.###.##',
'..#####..#.#########',
'####################',
'#.####....###.#.#.##',
'##.#################',
'#####.##.###..####..',
'..######..##.#######',
'####.##.####...##..#',
'.#####..#.######.###',
'##...#.##########...',
'#.##########.#######',
'.####.#.###.###.#.##',
'....##.##.###..#####',
'.#.#.###########.###',
'#.#.#.#####.####.###',
'###.##.####.##.#..##']

ast_coords = []

for j in range(len(lines)):
    for i in range(len(lines[0])):
        if lines[i][j] == '#':
            ast_coords.append((i, j))

visible_ast = {}


def in_line(x1, y1, x2, y2, x3, y3):
    epsilon = 0.00000001

    crossproduct = (y3 - y1) * (x2 - x1) - (x3 - x1) * (y2 - y1)

    # compare versus epsilon for floating point values, or != 0 if using integers
    if abs(crossproduct) > epsilon:
        return False

    dotproduct = (x3 - x1) * (x2 - x1) + (y3 - y1)*(y2 - y1)
    if dotproduct < 0:
        return False

    squaredlengthba = (x2 - x1)*(x2 - x1) + (y2 - y1)*(y2 - y1)
    if dotproduct > squaredlengthba:
        return False

    return True


for coord in ast_coords:
    possible_targets = len(ast_coords) - 1
    for target_coord in ast_coords:
        if target_coord == coord:
            continue
        for middle_coord in ast_coords:
            if middle_coord == target_coord or middle_coord == coord:
                continue
            if in_line(*coord, *target_coord, *middle_coord):
                possible_targets -= 1
                break

    visible_ast[coord] = possible_targets

max_val = max(visible_ast.values())

key = [k for k, v in visible_ast.items() if v == max_val]

print(key[0])


# for i in range(len(lines)):
#     for j in range(len(lines[0])):
#         if (i, j) in visible_ast:
#             print(visible_ast[(i, j)], end='')
#         else:
#             print('.', end='')
#     print('')

